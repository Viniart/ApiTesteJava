# Nome da aplicação
spring.application.name=apivivo

# Porta em que o servidor Tomcat irá rodar
server.port=8080

# --- Configurações para o banco de dados em memória H2 ---
# URL de conexão para o banco H2 em memória chamado 'testdb'
spring.datasource.url=jdbc:h2:mem:testdb

# Nome de usuário para o banco H2 (o padrão é 'sa')
spring.datasource.username=sa

# Senha para o banco H2 (pode ser deixada em branco)
spring.datasource.password=

# Driver do H2
spring.datasource.driver-class-name=org.h2.Driver

# Dialeto do Hibernate para H2, substituindo o do Oracle
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


# --- Configurações do Console H2 ---
# Habilita o console web do H2 para fácil visualização do banco
spring.h2.console.enabled=true

# Define o caminho para acessar o console do H2 (ex: http://localhost:8080/h2-console)
spring.h2.console.path=/h2-console


# --- Configurações JPA (mantidas do arquivo original) ---
# Exibe o SQL executado pelo Hibernate no console
spring.jpa.show-sql=true

# Formata o SQL exibido para melhor legibilidade
spring.jpa.properties.hibernate.format_sql=true

# Define a estratégia de geração do schema. 'create-drop' é ideal para bancos
# em memória, pois cria o schema na inicialização e o destrói ao encerrar a aplicação.
spring.jpa.hibernate.ddl-auto=create-drop

# Importa um script SQL para popular o banco na inicialização.
# ATENÇÃO: O script em 'populate-database.sql' deve ser compatível com a sintaxe do H2.
spring.jpa.properties.hibernate.hbm2ddl.import_files=sql/populate-database.sql
